#!/usr/bin/perl 

# bin2cas.pl - convert binary data to CAS or WAV with optional autorun

# Copyright (C) 2014 Ciaran Anscomb
# License: GNU GPL version 3 or later <http://www.gnu.org/licenses/gpl-3.0.html>.
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.
#
# Special exception: Code included in output (such as "dunzip") is not
# considered to be part of this program, so the GPL doesn't apply to the
# results.

# See the output of "bin2cas.pl --help" for detailed usage information, with
# examples.

# Pre-v2.0: really rubbish
# Pre-v3.0: getting better, but still limited
# v3.0: complete overhaul
#       supports multiple parts
#       builds reasonably arbitrary autorun loader
#       update VDG & SAM configs during loading
#       manual cursor flasher for when video offset changed
# v3.0a: tweak default samplerate to 12kHz if fast mode used
#        slightly increase speed in fast mode
# v3.1: default timing uses varying pulse widths to account for ROM delays
#       --timing option selects between "rom" and "simple" timing
#       fast cycle timing better at 9600Hz, so dropped default back
#       slightly faster WAV creation by caching runs of samples
# v3.2: don't redirect STDOUT
#       new option --lds inserts stack adjustment code into autorun
#       license foo, --version
# v3.3: actually drop default to 9600Hz
#       dzip using temp files under windows

use strict;

require v5.10;

use File::Temp qw/tempfile tempdir/;
use Math::Trig;
require bytes;

use constant VERSION => "3.3";

use constant {
	TYPE_BASIC => 0,
	TYPE_DATA => 1,
	TYPE_BINARY => 2,
};

use constant {
	DDOS_TYPE_BASIC => 1,
	DDOS_TYPE_BINARY => 2,
};

use constant {
	ENCODING_BINARY => 0,
	ENCODING_ASCII => 0xff,
};

use constant {
	GAP_FALSE => 0,
	GAP_TRUE => 0xff,
};

use constant {
	BLOCK_NAMEFILE => 0,
	BLOCK_DATA => 1,
	BLOCK_EOF => 0xff,
};

use constant {
	INPUT_RAW => 0,
	INPUT_DRAGONDOS => 1,
	INPUT_COCO => 2,
};

sub suggest_help {
	print STDERR "Try '$0 --help' for more information'\n";
	exit 1;
}

sub help_text {
	print <<EOF;
usage: $0 [OPTION]... input-file [[OPTION]... input-file]...
Convert binary data to CAS or WAV with optional autorun.

 Output file options:

  -o, --output FILE     output filename (required)
      --cas             write CAS file
      --wav             write WAV file
  -r, --wav-rate RATE   sample rate in Hz for WAV output [9600]
  -t, --timing NAME     select timing spec (rom or simple) [rom]

 Data options:

  -B                   following files are raw binary (default)
  -D                   following files are DragonDOS binary
  -C                   following files are CoCo RSDOS binary
      --leader COUNT   leader size before filename block and data
      --no-filename    no filename block required
  -n, --name NAME      name in filename block
  -l, --load ADDR      load address of next file
  -e, --exec ADDR      exec address of next file or to autorun
      --zload ADDR     override automatic load address for dzipped file

  -z, --dzip           dzip following files (adds dunzip to autorun)
      --fast           write following files 30% faster (WAV only)
      --eof-data       EOF block allowed to contain data (non-standard)
      --no-eof         don't emit EOF block for following files

      --no-dzip        don't dzip following files (default)
      --no-fast        following files written at normal speed (default)
      --no-eof-data    EOF block not allowed to contain data (default)
      --eof            do emit EOF block for following files (default)

  -i FILE              specify input file (e.g., if it begins with a "-")

 Autorun specific options:

      --autorun    build a single autorunning program
      --vdg MODE   set VDG mode before next file
      --sam-v V    set SAM VDG mode (0-7, see SAM docs)
      --sam-f F    set SAM display offset to F * 512
      --lds S      set the stack pointer
      --flasher    manual cursor flasher enabled for next file

 Other options:

      --help       show this help
      --version    show program version

The default sample rate for WAV output is 9600Hz, and this has been shown to
survive speed variations well when loading on real hardware while keeping file
size to a minimum.  However, if you are going to write the output to tape, it
is highly recommended that you specify a higher rate, e.g., with "-r 48000".

Without --autorun, each input file is written with its own filename block.

If --autorun is specified, all files are considered to be part of one
autorunning program.  Data options will apply to the next input file, and
instructions added to the autorun code where appropriate.  The last file
determines the EXEC address (unless specified).  Note: specify --autorun before
any input files.

The --flasher option is for use when the SAM display offset has been changed,
e.g., during a custom loading screen.  The ROM routine will continue to flash
\$0400, but this will not be visible, so this adds code to do it manually.

Normally the stack pointer is left at the top of BASIC.  Use the --lds option
to adjust it at any point.

To compress data, the "dzip" tool is required to be in your PATH.

Compressed data can be unzipped "in place", so long as one extra byte is
allowed beyond the end of the original data, so the load address for dzipped
data is calculated as (original load address + original file size + 1 - zipped
file size).  Sometimes that extra byte strays somewhere inconvenient, so this
calculated address can be overridden with the --zload option.  e.g., the extra
byte beyond a text loading screen encroaches into DOS workspace (\$0600), so
"--zload 0x0e00" would ensure the zipped data was loaded beyond it (also,
usefully, the end user then doesn't get to *see* the zipped data loading).

The default timing spec ("rom") accounts for the slight variations of delay in
the Dragon ROM before it starts to count a pulse width.  The "simple" timing
spec is closer to the output of CSAVE.

Simple example:

  $0 -o game.cas -D game.bin

Builds a non-autorunning CAS file from the DragonDOS binary "game.bin".
Load & exec addresses taken from the input binary.

Complex example:

  $0 --autorun -r 22050 -o game.wav --eof-data --dzip --fast \\
        -B --load 0x0e00 screen.bin \\
        --vdg 8 --sam-v 4 --sam-f 7 \\
        -C --flasher game.bin

Builds an autorunning 22kHz WAV file with two parts - a loading screen and the
main game.  Each part is dzipped, and a small amount of space is saved by
combining the last data block with the EOF indicator.  Each part is written
using shorter cycles - just over 30% faster than usual.

The loading screen data is a raw binary, so the load address is specified.
Once the screen has been loaded (and dunzipped into place), the VDG is put into
alpha/semigraphics mode with CSS 1, the SAM is configured to G3C (these two
combined configure Semigraphics 12 mode), and the SAM display offset set to
\$0e00.

The game code is taken from a CoCo RSDOS (DECB) binary which contains load and
exec information.  Extra cursor flashing code is added to the autorunner, as
the display offset is no longer \$0400.  As the last input file, its exec
address is used to autorun once loading is complete.
EOF
	exit 0;
}

sub version_text {
	printf "bin2cas.pl %s\n", VERSION;
	print <<EOF;
Copyright (C) 2014 Ciaran Anscomb
License: GNU GPL version 3 or later <http://www.gnu.org/licenses/gpl-3.0.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Special exception: Code included in output (such as "dunzip") is not
considered to be part of this program, so the GPL doesn't apply to the
results.
EOF
	exit 0;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Map DragonDOS filetypes to tape filetypes.

my %ddos_to_tape_type = (
		DDOS_TYPE_BASIC => TYPE_BASIC,
		DDOS_TYPE_BINARY => TYPE_BINARY,
		);

# Wave data.

my @wav_header = (
		0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00,
		0x57, 0x41, 0x56, 0x45, 0x66, 0x6d, 0x74, 0x20,
		0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x08, 0x00, 0x64, 0x61, 0x74, 0x61,
		0x00, 0x00, 0x00, 0x00
		);

# Timings

# 'cycles' is the nominal number of CPU cycles (SAM / 16) in the waveform for
# each bit (0, 1), the rest are pulse specs.

# Pulse spec is three pairs of pulse delays (first pulse, second pulse):
# - first bit of first byte
# - remaining bits in each byte
# - first bit of subsequent bytes

# 'leader' is pulse spec while writing leader bytes and the sync byte
# 'first' is pulse spec for the first byte in a block
# 'rest' is pulse spec for remaining bytes in a block (until next leader)

# The "targetted" spec is intended to be the "best fit" for the Dragon ROM -
# that is, the ROM will count an "ideal" pulse width for each bit.  This should
# improve reliability.

my %timing_simple = (
		'cycles' => [ 813, 435 ],
		'leader' => [ 0, 0, 0, 0, 0, 0 ],
		'first' => [ 46, 0, 0, 0, 46, 0 ],
		'rest' => [ 46, 0, 0, 0, 46, 0 ],	# 818.75, 440.75 -> 629.75
		);

my %timing_rom = (
		'cycles' => [ 26*28, 13*28 ],
		'leader' => [ 205, 5, 68, 5, 68, 5 ],
		'first' => [ 81, 5, 67, 5, 120, 5 ],
		'rest' => [ 120, 5, 67, 5, 120, 5 ],	# 806.625, 442.625 -> 625.625
		);

my %timing_fast = (
		'cycles' => [ 18*28, 7*28 ],
		'leader' => [ 205, 5, 68, 5, 68, 5 ],
		'first' => [ 81, 5, 67, 5, 120, 5 ],
		'rest' => [ 120, 5, 67, 5, 120, 5 ],	# 582.625, 274.625 -> 428.125
		);

my %timing_by_name = (
		'simple' => \%timing_simple,
		'rom' => \%timing_rom,
		);

# Autorun headers can include optional parts, concatenated and subject to
# linking.

my @code_load_0 = (
	"load_part",
		0x9f, 0x7e,		# stx	<$7e
		0xad, 0x9f, 0xa0, 0x04,	# jsr	[CSRDON]
	"l0",
);

my @code_load_flash = (
		0xb6, ">flash_addr",	# lda	>flash_addr
		0x88, 0x40,		# eora	#$40
	# flash code starts off disabled (first load will still be in text mode)
	"mod_flash",
		0x8c, ">flash_addr",	# cmpx	>flash_addr
);

my @code_load_1 = (
		0xad, 0x9f, 0xa0, 0x06,	# jsr	[BLKIN]
		0x26, "\&<do_io_error",	# bne	do_io_error
		0x9f, 0x7e,		# stx	<$7e
		0x96, 0x7c,		# lda	<$7c
		0x4c,			# inca
		0x26, "\&<l0",		# bne	l0
	"cas_off",
		0xb6, 0xff, 0x21,	# lda	>$ff21
		0x84, 0xf7,		# anda	#$f7
		0xb7, 0xff, 0x21,	# sta	>$ff21
	"do_rts",
		0x39,			# rts
	"do_io_error",
		0x8d, "\&<cas_off",	# bsr	cas_off
		0x8e, ">io_error",	# ldx	#io_error
		0x8d, "\&<out_string",	# bsr	out_string
	"l1",
		0x20, "\&<l1",		# bra	l1
	"out_string",
		0xa6, 0x80,		# lda	,x+
		0x27, "\&<do_rts",	# beq	do_rts
		0xad, 0x9f, 0xa0, 0x02,	# jsr	[OUTCH]
		0x20, "\&<out_string",	# bra	out_string
	"io_error",
		0x49, 0x2f, 0x4f, 0x20,	# fcc	"I/O "
		0x45, 0x52, 0x52, 0x4f,	# fcc	"ERRO"
		0x52, 0x00,		# fcc	"R",0
);

my @code_disable_flasher = (
		0x86, 0x8c,		# lda	#$8c		; cmpx
		0xb7, ">mod_flash",	# sta	mod_flash
);

my @code_enable_flasher = (
		0x86, 0xb7,		# lda	#$8c		; sta
		0xb7, ">mod_flash",	# sta	mod_flash
);

my @code_test_arch = (
		0xb6, 0xa0, 0x00,	# lda	$a000
		0x84, 0x20,		# anda	#$20
		0x97, 0x10,		# sta	<$10
);

my @code_fast = (
		0xcc, ">fast_pw",	# ldd	#fast_pw
		0x0d, 0x10,		# tst	<$10
		0x26, "\&<fl1",		# bne	fl1
		0xdd, 0x92,		# std	<$92
		0x97, 0x94,		# sta	<$94
		0x20, "\&<fl2",		# bra	fl2
	"fl1",
		0xdd, 0x90,		# std	<$90
		0x97, 0x8f,		# sta	<$8f
	"fl2",
);

my @code_dunzip = (
	"dunzip",
		0x34, 0x06,		# pshs	d
	"dunz_loop",
		0xec, 0x81,
		0x2a, "\&<dunz_run",	# bpl	dunz_run
		0x5d,			# tstb
		0x2a, "\&<dunz_7_7",	# bpl	dunz_7_7
	"dunz_14_8",
		0x58,			# lslb
		0x47,			# asra
		0x56,			# rorb
		0x31, 0xcb,		# leay	d,u
		0xe6, 0x80,		# ldb	,x+
		0x20, "\&<dl0",		# bra	dl0
	"dunz_7_7",
		0x31, 0xc6,		# leay	a,u
	"dl0",
		0xa6, 0xa0,		# lda	,y+
		0xa7, 0xc0,		# sta	,u+
		0x5c,			# incb
		0x28, "\&<dl0",		# bvc	dl0
		0x20, "\&<dl2",		# bra	dl2
	"dl1",
		0xe6, 0x80,		# ldb	,x+
	"dunz_run",
		0xe7, 0xc0,		# stb	,u+
		0x4c,			# inca
		0x28, "\&<dl1",		# bvc	dl1
	"dl2",
		0xac, 0xe4,		# cmpx	,s
		0x25, "\&<dunz_loop",	# blo	dunz_loop
		0x35, 0x86,		# puls	d,pc
);

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Global options
my $out_filename;
my $out_fd;
my $wav_out;
my $sample_rate;
my $timing_normal = "rom";

# Data options
my $input_mode = INPUT_RAW;
my $leader = 256;
my $want_fnblock = 1;
my $want_name;
my $want_load;
my $want_exec;
my $want_zload;
my $want_dzip = 0;
my $any_dzip = 0;
my $want_fast = 0;
my $any_fast = 0;
my $want_eof_data = 0;
my $want_eof = 1;

# Autorun specific options

my $autorun = 0;
my $want_flasher = 0;
my $any_flasher = 0;

# Initialisation

my $output_opened = 0;

# Relocation

my $mc_org;
my $mc_pc;
my %mc_label = ();
my @mc_link;
my $mc_data;

# WAV

my $bits_per_sample = 8;
my $num_channels = 1;
my $sample_count = 0;
my $ao_error = 0;
my %sinewaves = ();
my $timing;

# this combination of slow cycle pulse width boundaries seems to allow reliable
# tape speed variance of at least +/-7% when emitting 30% faster data to a
# 9600Hz WAV
$mc_label{'fast_pw'} = 0x0c06;

# de-taint PATH for call out to dzip
if ($ENV{'PATH'} =~ /^(.*)$/) {
	$ENV{'PATH'} = $1;
}

sub eval_int {
	my $string = shift;
	if ($string =~ /^(\d+|0x[\da-f]+)$/i) {
		return eval $1;
	}
	die "invalid number format: $string\n";
}

my @files = ();
my %file = ();

while (my $opt = shift @ARGV) {
	if ($opt eq '--') {
		last;
	} elsif ($opt eq '-o' || $opt eq '--output') {
		my $v = shift @ARGV;
		if ($v =~ /(.*)/) {
			$out_filename = $1;  # de-taint
		}
	} elsif ($opt eq '--cas') {
		$wav_out = 0;
	} elsif ($opt eq '--wav' || $opt eq '--wav-out') {
		$wav_out = 1;
	} elsif ($opt eq '-r' || $opt eq '--wav-rate') {
		$sample_rate = eval_int(shift @ARGV);
	} elsif ($opt eq '-t' || $opt eq '--timing') {
		$timing_normal = shift @ARGV;
		die "bad timing name\n" if (!exists $timing_by_name{$timing_normal});
	} elsif ($opt eq '-B') {
		$input_mode = INPUT_RAW;
	} elsif ($opt eq '-D') {
		$input_mode = INPUT_DRAGONDOS;
	} elsif ($opt eq '-C') {
		$input_mode = INPUT_COCO;
	} elsif ($opt eq '--leader') {
		$leader = eval_int(shift @ARGV);
	} elsif ($opt eq '--no-filename') {
		$want_fnblock = 0;
	} elsif ($opt eq '--filename') {
		$want_fnblock = 1;
	} elsif ($opt eq '-n' || $opt eq '--name') {
		$want_name = shift @ARGV;
	} elsif ($opt eq '-l' || $opt eq '--load') {
		$want_load = eval_int(shift @ARGV);
	} elsif ($opt eq '-e' || $opt eq '--exec') {
		$want_exec = eval_int(shift @ARGV);
	} elsif ($opt eq '--zload') {
		$want_zload = eval_int(shift @ARGV);
	} elsif ($opt eq '--no-dzip') {
		$want_dzip = 0;
	} elsif ($opt eq '-z' || $opt eq '--dzip') {
		$want_dzip = 1;
		$any_dzip = 1;
	} elsif ($opt eq '--no-fast') {
		$want_fast = 0;
	} elsif ($opt eq '--fast') {
		$want_fast = 1;
		$any_fast = 1;
	} elsif ($opt eq '--no-eof-data') {
		$want_eof_data = 0;
	} elsif ($opt eq '--eof-data') {
		$want_eof_data = 1;
	} elsif ($opt eq '--no-eof') {
		$want_eof = 0;
	} elsif ($opt eq '--eof') {
		$want_eof = 1;
	} elsif ($opt eq '-i') {
		my $filename = shift @ARGV;
		my $file = input_file($filename);
		push @files, $file;
		if (!$autorun) {
			undef $want_name;
			undef $want_exec;
		}
		undef $want_load;
		undef $want_zload;
	} elsif ($opt eq '--no-autorun') {
		$autorun = 0;
	} elsif ($opt eq '--autorun' || $opt eq '--dunzip') {
		$autorun = 1;
	} elsif ($opt eq '--vdg') {
		my $v = eval_int(shift @ARGV);
		push @files, { 'code' => "set_vdg", 'value' => $v };
	} elsif ($opt eq '--sam-v') {
		my $v = eval_int(shift @ARGV);
		push @files, { 'code' => "set_sam_v", 'value' => $v };
	} elsif ($opt eq '--sam-f') {
		my $v = eval_int(shift @ARGV);
		push @files, { 'code' => "set_sam_f", 'value' => $v };
	} elsif ($opt eq '--lds') {
		my $v = eval_int(shift @ARGV);
		push @files, { 'code' => "lds", 'value' => $v };
	} elsif ($opt eq '--no-flasher') {
		$want_flasher = 0;
	} elsif ($opt eq '--flasher') {
		$want_flasher = 1;
		$any_flasher = 1;
	} elsif ($opt eq '--help') {
		help_text();
	} elsif ($opt eq '--version') {
		version_text();
	} elsif ($opt =~ /^-/) {
		print STDERR "Unrecognised option '$opt'\n";
		suggest_help();
	} else {
		my $file = input_file($opt);
		push @files, $file;
		if (!$autorun) {
			undef $want_name;
			undef $want_exec;
		}
		undef $want_load;
		undef $want_zload;
	}
}

# Prepare output stream.

die "No output filename specified\n" unless (defined $out_filename);
open($out_fd, ">", $out_filename) or die $!;
binmode $out_fd;
if ($out_filename =~ /\.cas$/i) {
	$wav_out //= 0;
} elsif ($out_filename =~ /\.wav$/i) {
	$wav_out //= 1;
}

$sample_rate //= 9600;
my $sam_rate = 14318180;
my $bytes_per_sample = $bits_per_sample >> 3;

# WAV header?
if ($wav_out) {
	# NumChannels
	$wav_header[22] = $num_channels;
	$wav_header[23] = ($num_channels >> 8) & 0xff;
	# SampleRate
	$wav_header[24] = $sample_rate & 0xff;
	$wav_header[25] = ($sample_rate >> 8) & 0xff;
	$wav_header[26] = ($sample_rate >> 16) & 0xff;
	$wav_header[27] = ($sample_rate >> 24) & 0xff;
	# ByteRate
	my $byte_rate = $sample_rate * $num_channels * $bytes_per_sample;
	$wav_header[28] = $byte_rate & 0xff;
	$wav_header[29] = ($byte_rate >> 8) & 0xff;
	$wav_header[30] = ($byte_rate >> 16) & 0xff;
	$wav_header[31] = ($byte_rate >> 24) & 0xff;
	# BlockAlign
	my $block_align = ($num_channels * $bits_per_sample) / 8;
	$wav_header[32] = $block_align & 0xff;
	$wav_header[33] = ($block_align >> 8) & 0xff;
	# BitsPerSample
	$wav_header[34] = $bits_per_sample & 0xff;
	$wav_header[35] = ($bits_per_sample >> 8) & 0xff;
	print $out_fd pack("C*", @wav_header);
}

# Write file(s).

if ($autorun) {
	write_autorun(\@files);
} else {
	for my $file (@files) {
		write_file($file);
	}
}

# Close output.

if ($wav_out) {
	# rewrite Subchunk2Size
	seek($out_fd, 40, 0);
	print $out_fd pack("C", $sample_count & 0xff);
	print $out_fd pack("C", ($sample_count >> 8) & 0xff);
	print $out_fd pack("C", ($sample_count >> 16) & 0xff);
	print $out_fd pack("C", ($sample_count >> 24) & 0xff);
	# rewrite ChunkSize
	$sample_count += 36;
	seek($out_fd, 4, 0);
	print $out_fd pack("C", $sample_count & 0xff);
	print $out_fd pack("C", ($sample_count >> 8) & 0xff);
	print $out_fd pack("C", ($sample_count >> 16) & 0xff);
	print $out_fd pack("C", ($sample_count >> 24) & 0xff);
}

exit 0;

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Read a file, applying current defaults.

sub input_file {
	my ($filename,$file) = @_;
	$file //= {};

	# apply current selections as file defaults
	$file->{'fnblock'} //= $want_fnblock;
	$file->{'eof'} //= $want_eof;
	$file->{'eof_data'} //= $want_eof_data;
	$file->{'fast'} //= $want_fast;

	$file = do {
		if ($input_mode == INPUT_DRAGONDOS) {
			read_dragondos($filename, $file);
		} elsif ($input_mode == INPUT_COCO) {
			read_coco($filename, $file);
		} else {
			read_raw($filename, $file);
		}
	};

	$file->{'name'} = $want_name if (defined $want_name);
	$file->{'load'} = $want_load if (defined $want_load);
	$file->{'exec'} = $want_exec if (defined $want_exec);
	$file->{'zload'} = $want_zload if (defined $want_zload);
	$file->{'flasher'} = $want_flasher;
	$file->{'name'} //= "BINARY";

	die "Internal error\n" unless defined $file;
	die "No data\n" unless exists $file->{'segments'};

	# XXX only deal with single-segment binaries for now
	coalesce_file($file);

	dzip_file($file) if ($want_dzip);

	return $file;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# File readers

sub open_file {
	my ($filename,$file) = @_;
	$file //= {};
	open(my $in, "<", $filename) or die "failed to open $filename: $!\n";
	binmode $in;
	if ($filename =~ /^([^\.]{1,8})/) {
		$file->{'name'} //= uc $1;
	}
	return $in;
}

# Raw binary: just slurp data into one segment
sub read_raw {
	my ($filename,$file) = @_;
	$file //= {};
	my $in = open_file($filename, $file);
	my %segment = (
		'start' => 0,
		'size' => 0,
		'data' => "",
	);
	my $data;
	my $rsize;
	do {
		$rsize = read $in, $data, 0x10000;
		$segment{'data'} .= $data;
		$segment{'size'} += $rsize;
	} while ($rsize == 0x10000);
	$file->{'segments'} = [ \%segment ];
	close $in;
	return $file;
}

# DragonDOS binary - single segment only
sub read_dragondos {
	my ($filename,$file) = @_;
	my $in = open_file($filename, $file);

	getc($in);  # skip $55
	my $type = unpack("C", getc($in));
	my $start = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));
	my $size = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));
	my $exec = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));
	getc($in);  # skip $aa

	my $data;
	my $rsize = read $in, $data, $size;
	if ($rsize != $size) {
		print STDERR "Warning: short read from DragonDOS binary\n";
	}
	my %segment = (
		'start' => $start,
		'data' => $data,
		'size' => $rsize,
	);
	$file->{'segments'} = [ \%segment ];
	close $in;

	$file->{'type'} //= $ddos_to_tape_type{$type} // TYPE_BINARY;
	$file->{'exec'} //= $exec;
	return $file;
}

# CoCo (DECB) - binaries can contain multiple segments

# BASIC files are: $ff size>>8 size data*
# BINARY files are: ($00 size>>8 size data*)+ $ff 00 00 exec>>8 exec
#   (binaries can contain multiple segments)

sub read_coco {
	my ($filename,$file) = @_;
	my $in = open_file($filename, $file);

	my $type;
	my $exec;

	while (my $stype = getc($in)) {
		$stype = unpack("C", $stype);

		my $start;
		my $size = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));

		if ($stype == 0x00) {
			$type //= TYPE_BINARY;
			$start = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));
		} elsif (!defined $type && $stype == 0xff) {
			$type = TYPE_BASIC;
			$start = 0;
			$exec = 0;
		} elsif ($stype == 0xff) {
			if ($size != 0) {
				# XXX is this dodgy?
				printf STDERR "Warning: EXEC segment with non-zero size in CoCo binary\n";
			}
			$exec = (unpack("C", getc($in)) << 8) | unpack("C", getc($in));
		} else {
			printf STDERR "Warning: skipping data in CoCo binary\n";
			last;
		}

		if ($size > 0) {
			my $data;
			my $rsize = read $in, $data, $size;
			if ($rsize != $size) {
				print STDERR "Warning: short read from CoCo binary\n";
			}
			push @{$file->{'segments'}}, {
				'start' => $start,
				'data' => $data,
				'size' => $rsize,
			};
		}
	}
	close $in;

	$file->{'type'} //= $type // TYPE_BINARY;
	$file->{'exec'} //= $exec if (defined $exec);
	return $file;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Replace zero or more segments with exactly one zero-padded segment.  All
# other file information preserved.

sub coalesce_file {
	my $file = shift;
	return if (exists $file->{'segments'} && scalar(@{$file->{'segments'}}) == 1);
	my $old_segments = $file->{'segments'} // [];
	my %segment = ();
	my $end;
	for my $s (sort { $a->{'start'} <=> $b->{'start'} } @{$old_segments}) {
		my $start = $s->{'start'};
		$segment{'start'} //= $start;
		$end //= $start;
		my $size = bytes::length($s->{'data'});
		my $new_end = $start + $size;
		# TODO
		if ($start < $end) {
			die "Can't handle overlapping segments\n";
		}
		# TODO
		if ($end >= 0x10000) {
			die "Segment too large\n";
		}
		if ($start > $end) {
			$segment{'data'} .= "\0" x ($start - $end);
		}
		$segment{'data'} .= $s->{'data'};
		$end = $new_end;
	}
	$segment{'data'} //= "";
	$segment{'start'} //= 0;
	$end //= $segment{'start'};
	$segment{'size'} = $end - $segment{'start'};
	$file->{'segments'} = [ \%segment ];
}

# Pass file data to dzip.  Replaces data, preserves original file metadata and
# "osize" records original data size.

sub dzip_file {
	my $file = shift;
	coalesce_file($file);  # single-segment only
	my $segment = $file->{'segments'}[0];
	my $osize = $segment->{'size'} // bytes::length($segment->{'data'});
	my $zdata = "";
	my $cfd;
	my $tmp_filename;
	if ($^O eq 'MSWin32') {
		# So windows doesn't support forked pipes or list open().  Ack!
		# Ok, write binary to a temporary file, dzip it, then read in
		# the results.  This is dumb.
		my $tmp_dir = tempdir(CLEANUP => 1);  # auto-clean on exit
		my $tmp_fd;
		($tmp_fd, $tmp_filename) = tempfile(DIR => $tmp_dir);
		binmode $tmp_fd;
		print $tmp_fd $segment->{'data'};
		close $tmp_fd;
		system("dzip", "-k", $tmp_filename);
		open($cfd, "<", "$tmp_filename.dz") or die "Can't open dzipped tempfile\n";
	} else {
		# For everything else, just pass the binary out to a fork
		# running dzip.  No race.
		my $pid = open($cfd, "-|") // die "Failed to open pipe to dzip\n";
		if ($pid == 0) {
			open(my $zfd, "|-", "dzip", "-c") // exit 0;
			binmode $zfd;
			print $zfd $segment->{'data'};
			close $zfd;
			exit 0;
		}
	}
	binmode $cfd;
	{
		local $/ = undef;
		$zdata = <$cfd>;
	}
	close $cfd;
	if ($^O eq 'MSWin32') {
		unlink "$tmp_filename.dz";
	}
	# reposition...
	my $zsize = bytes::length($zdata);
	die "No data from pipe to dzip\n" unless ($zsize > 0);
	$segment->{'dzip'} = 1;
	$segment->{'data'} = $zdata;
	$segment->{'size'} = $zsize;
	$segment->{'osize'} = $osize;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sub speed_normal {
	$timing = $timing_by_name{$timing_normal};
}

sub speed_fast {
	$timing = \%timing_fast;
}

# Write a file.

sub write_file {
	my $file = shift;

	if ($file->{'fast'}) {
		speed_fast();
	} else {
		speed_normal();
	}

	# XXX only deal with single-segment files
	coalesce_file();
	my $segment0 = $file->{'segments'}[0];

	# Write filename block if required.
	if ($file->{'fnblock'}) {
		my $name = $file->{'name'} // "BINARY";
		my $type = $file->{'type'} // TYPE_BINARY;
		my $encoding = ENCODING_BINARY;
		my $gap = GAP_FALSE;
		my $load = $file->{'load'} // $segment0->{'start'} // 0x0e00;
		my $exec = $file->{'exec'} // $load;
		my $fndata = sprintf("\%-8s", $name);
		$fndata .= pack("CCCnn", $type, $encoding, $gap, $exec, $load);
		write_leader();
		block_out(BLOCK_NAMEFILE, $fndata);
	}

	# Write file data.
	write_leader();
	my $data = $segment0->{'data'};
	my $size = $segment0->{'size'};
	my $ptr = 0;
	while ($size > 0) {
		my $bsize = ($size > 255) ? 255 : $size;
		$size -= $bsize;
		if ($size == 0 && !$file->{'no_eof'}) {
			if ($file->{'eof_data'}) {
				block_out(BLOCK_EOF, bytes::substr($data, $ptr, $bsize));
			} else {
				block_out(BLOCK_DATA, bytes::substr($data, $ptr, $bsize));
				block_out(BLOCK_EOF, "");
			}
		} else {
			block_out(BLOCK_DATA, bytes::substr($data, $ptr, $bsize));
		}
		$ptr += $bsize;
	}

	bytes_out("U", $timing->{'leader'});
}

# Write an autorun file, using data from a list of files.

sub write_autorun {
	my $files = shift;

	# Ensure autorun program is stored at normal speed.
	speed_normal();

	my $vdg = 0;
	my $sam_v = 0;
	my $sam_f = 2;  # 0x0400
	my $flasher = 0;
	$mc_label{'flash_addr'} = 0x0400;

	my $name = $want_name // "BINARY";

	# Construct a special filename block to autorun.  This builds the data
	# out of blocks of code and then "links" it, as the contents can vary
	# (multiple files to load, fast loading, dunzipping data).

	# The standard part of the filename block.
	mcdata_org(0x01da);
	mcdata_add(\sprintf("\%-8s", $name));	# filename
	mcdata_add([
			TYPE_BINARY,		# file type: machine code
			ENCODING_BINARY,	# ascii flag: binary
			GAP_FALSE,		# gap flag: continuous
		"colon",
			0x3a, 0x00,		# exec address (convenient ':')
			0x00, 0xa6,		# load address: BASIC next
		"exec_loader",			# main code starts at $01e9
			]);

	# Include fast loader setup if necessary.
	if ($any_fast && $wav_out) {
		mcdata_add(\@code_test_arch);
		mcdata_add(\@code_fast);
	}

	# For each file, add loading instructions.
	my $last_exec = 0;
	for my $file (@{$files}) {
		# a "file" might just be some specific code instructions!
		my $code = $file->{'code'} // "";
		my $value = $file->{'value'} // 0;
		if ($code eq "set_vdg") {
			$value &= 0xf8;
			if ($vdg != $value) {
				mcdata_add([
						0x86, $file->{'value'},	# lda	#value
						0xb7, 0xff, 0x22,	# sta	>$ff22
					]);
			}
			$vdg = $value;
		} elsif ($code eq "set_sam_v") {
			for my $i (0..2) {
				my $bit = (1 << $i);
				next if ((($sam_v ^ $value) & $bit) == 0);
				my $addr = 0xc0 + $i * 2;
				$addr++ if ($value & $bit);
				mcdata_add([
						0xb7, 0xff, $addr,	# sta	>$ffxx
					]);
			}
			$sam_v = $value & 7;
		} elsif ($code eq "set_sam_f") {
			for my $i (0..6) {
				my $bit = (1 << $i);
				next if ((($sam_f ^ $value) & $bit) == 0);
				my $addr = 0xc6 + $i * 2;
				$addr++ if ($value & $bit);
				mcdata_add([
						0xb7, 0xff, $addr,	# sta	>$ffxx
					]);
			}
			$sam_f = $value & 0x7f;
			$mc_label{'flash_addr'} = $sam_f * 512;
		} elsif ($code eq "lds") {
			mcdata_add([
					0x10, 0xce, $value>>8, $value&0xff,	# lds	#value
					]);
		} else {
			my $segment0 = $file->{'segments'}[0];
			my $load = $file->{'load'} // $segment0->{'start'};
			my $size = $segment0->{'size'};
			my $oload = 0;
			if ($segment0->{'dzip'}) {
				my $osize = $segment0->{'osize'};
				$oload = $load;
				$load = $file->{'zload'} // $oload + $osize + 1 - $size;
			}
			my $end = $load + $size;
			my $fflasher = $file->{'flasher'} // 0;
			if ($flasher && !$fflasher) {
				mcdata_add(\@code_disable_flasher);
			} elsif (!$flasher && $fflasher) {
				mcdata_add(\@code_enable_flasher);
			}
			$flasher = $fflasher;
			mcdata_add([
					0x8e, $load>>8, $load&0xff,	# ldx	#load
					0x8d, "\&<load_part",	# bsr	load_part
				]);
			if ($segment0->{'dzip'}) {
				mcdata_add([
						0x8e, $load>>8, $load&0xff,	# ldx	#load
						0xcc, $end>>8, $end&0xff,	# ldd	#end
						0xce, $oload>>8, $oload&0xff,	# ldu	#oload
						0x8d, "\&<dunzip",	# bsr	dunzip
					]);
			}
			$last_exec = $file->{'exec'};
		}
	}
	$mc_label{'exec'} = $last_exec // 0;

	# Finally, JMP to the program.
	mcdata_add([
			0x7e, ">exec",		# jmp	exec
			]);

	# Optional and non-optional chunks of code in support of above.
	mcdata_add(\@code_load_0);
	mcdata_add(\@code_load_flash) if ($any_flasher);
	mcdata_add(\@code_load_1);
	mcdata_add(\@code_dunzip) if ($any_dzip);

	# Link - replace all symbol references with actual addresses.
	mcdata_link();

	# Write filename block.
	write_leader();
	block_out(BLOCK_NAMEFILE, $mc_data);

	# Now the data portion of the loader.  Tiny, just overwrites "next
	# basic token with a pointer to that convenient ':' in the filename
	# block, and makes BASIC JMP to the loader code.
	mcdata_org(0x00a6);
	mcdata_add([
			">colon",		# fdb	colon
			0x7e, ">exec_loader",	# jmp	exec_loader
			]);
	mcdata_link();
	write_leader();
	block_out(BLOCK_EOF, $mc_data);

	# Now write file data, each without a filename block.
	for my $file (@{$files}) {
		next if (exists $file->{'code'});
		$file->{'fnblock'} = 0;
		write_file($file);
	}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sub write_leader {
	if ($wav_out) {
		sample_out(0x80, 0xda5c * 8);
	} else {
		bytes_out("U" x 94, $timing->{'leader'});
		# NOTE: CAS files can't be fast, but if they were, typical
		# pause would be 136 leader bytes
	}
	bytes_out("U" x $leader, $timing->{'leader'});
}

sub block_out {
	my ($btype,$data) = @_;
	my $bsize = bytes::length($data);
	my $sum = $btype + $bsize;;
	bytes_out(pack("C*", 0x55, 0x3c), $timing->{'leader'});
	bytes_out(pack("C*", $btype, bytes::length($data)), $timing->{'first'});
	bytes_out($data, $timing->{'rest'});
	for (unpack("C*", $data)) {
		$sum += $_;
	}
	bytes_out(pack("C", $sum & 0xff), $timing->{'rest'});
	bytes_out(pack("C", 0x55), $timing->{'leader'});
}

sub ao_period {
	my $cycles = shift;
	my $period = $ao_error + ($sample_rate * $cycles * 16) / $sam_rate;
	$ao_error = $period - int($period + 0.5);
	return int($period + 0.5);
}

sub bytes_out {
	my ($data,$pspec) = @_;
	my $delay0 = $pspec->[0];
	my $delay1 = $pspec->[1];
	if (!$wav_out) {
		print $out_fd $data;
		return;
	}
	for my $byte (unpack("C*", $data)) {
		for (0..7) {
			my $cycles = $timing->{'cycles'}->[$byte  &1] / 2;
			my $period0 = ao_period($cycles + $delay0);
			my $period1 = ao_period($cycles + $delay1);
			print $out_fd sinewave($period0, $period1);
			$sample_count += $period0 + $period1;
			$byte >>= 1;
			$delay0 = $pspec->[2];
			$delay1 = $pspec->[3];
		}
		$delay0 = $pspec->[4];
		$delay1 = $pspec->[5];
	}
}

sub sample_out {
	my $samp = shift;
	my $cycles = shift;
	my $period = ao_period($cycles);
	print $out_fd pack("C", $samp) x $period;
	$sample_count += $period;
}

sub sinewave {
	my $period0 = shift;
	my $period1 = shift // $period0;
	if (exists $sinewaves{"$period0,$period1"}) {
		return $sinewaves{"$period0,$period1"};
	}
	my $sw = pack("C*",
			(map {
			 my $v = sin((pi*$_)/($period0+1));
			 int(($v * 115) + 128); } (1..$period0)),
			(map {
			 my $v = sin(pi+(pi*$_)/($period1+1));
			 int(($v * 115) + 128); } (1..$period1)));
	$sinewaves{"$period0,$period1"} = $sw;
	return $sw;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Initialise machine code data.  Note, does not clear label table.

sub mcdata_org {
	$mc_org = shift;
	$mc_pc = $mc_org;
	@mc_link = ();
	$mc_data = "";
}

# Add machine code data.

sub mcdata_add {
	my $text = shift;
	if (ref($text) eq 'ARRAY') {
		for my $byte (@{$text}) {
			if ($byte =~ /^[a-z]/) {
				$mc_label{$byte} = $mc_pc;
			} elsif ($byte =~ /^\&?</) {
				$mc_pc++;
				push @mc_link, [ $byte, $mc_pc ];
				$mc_data .= "\x00";
			} elsif ($byte =~ /^\&?>/) {
				$mc_pc += 2;
				push @mc_link, [ $byte, $mc_pc ];
				$mc_data .= "\x00\x00";
			} else {
				$mc_pc++;
				$mc_data .= pack("C", $byte);
			}
		}
	} elsif (ref($text) eq 'SCALAR') {
		$mc_data .= $$text;
		$mc_pc += bytes::length($$text);
	}
}

# "Link" the machine code - replace all the entries in @mc_link with computed
# values.

sub mcdata_link {
	for my $r (@mc_link) {
		my $rlabel = $r->[0];
		my $pc = $r->[1];
		my $off = $pc - $mc_org;
		if ($rlabel =~ /^(\&)?([<>])(.*)/) {
			my ($rel,$size,$label) = ($1,$2,$3);
			my $addr = $mc_label{$label} or die "missing label: $label\n";
			$size = ($size eq '<') ? 1 : 2;
			$off -= $size;
			$addr -= $pc if ($rel);
			my $subdata;
			if ($size == 1) {
				$subdata = pack("C", $addr & 0xff);
			} else {
				$subdata = pack("n", $addr & 0xffff);
			}
			bytes::substr($mc_data, $off, $size, $subdata);
		}
	}
}
